% MJ 2019 Mar - 2021 Apr - 2021Sep
% Find all folders (optional)
% Find all files (single-cell image stack + binary mask file)
% Analyze qTGT rupture signal etc. 
% Analyze cell shapes from the corresponding mask file. 
% *Binary mask images are generated by "SaveCellArea_folder.m"

clear all
close all

%% Setting: Cell shape
fAllsubfolders = true;  % "false" for the selected sigle folder.
pixelsize = 13/60;      % !!! chekc the objective magnification etc.
sizeoption = [43 inf];  % [a b] for area filtering "43~2um^2" "107~5um^2" "214~10um^2" (60X)
flag4mask = 'region';   % skip files not containing the flag in filename.
flag4skip = 'bgSub';       % skip files with this word.  

%% Setting: Signal analysis (qTGT or Fab etc.)
fluorChan = 0;                       %specify the chan of image stack. * '0' not to use. 
fReadBleachingStep = true;
singleDyeInt_1s = 0*7532/2;     %single dye intensity when the exposure is 1s. eg. 16500 with 2s exposure => 16500/2
dataExposureTime = 0.1;         %unit of sec, exposure time for the data to be analyzed
bgParam = 3;                    %bg = mean(edgepx) + bgParam*std(double(edgepx));
fSaveBGsub = false;             %Save the background substracted image.
smscale = singleDyeInt_1s*dataExposureTime;  %ex. /20 for 100ms measurement, 2s calibration. %smscale = bleachingstep/20;    
%buffersize = 50;                %max number of image in the folder
%figTitle = 'Cy3';
%tag1 = ['ch' num2str(chan) '_'];%add a text to savefile name

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Find the path
path0 = uigetdir();
idcs = strfind(path0,'\');
path_parent = path0(1:idcs(end)-1);

%% Find subfolders (options: ending with '_each')
if fAllsubfolders 
    path1 = path0;
    files    = dir(path1);
    names    = {files.name};
    dirFlags = [files.isdir] & ~strcmp(names, '.') & ~strcmp(names, '..');
    subfolders = names(dirFlags);
    numFolder = size(subfolders,2);
else
    numFolder = 1;
end

%% Do sth for each subfolder
for cnt_subfoler = 1:numFolder
    
    if fAllsubfolders
        path2 = subfolders(cnt_subfoler);
        thisFolder = path2{1}
        thisPath = [path1 filesep thisFolder];
    else
        thisPath = path0;
        tmp=regexp(path0,filesep,'split');
        thisFolder = tmp{end}
    end
    
    %% Process
    cd(thisPath);
    matfiles = dir(fullfile(thisPath, '*.tif'));
    nfiles = length(matfiles);
    StatTable =[];
    
    for i = 1:nfiles
        filename = matfiles(i).name;
        if contains(filename,flag4mask)
            continue
        end
        
        if contains(filename,flag4skip)
            continue
        end
        
        %% Signal analysis (qTGT) 
        %Load an iamge stack.
        %filename = fullfile(matfiles(f).folder, matfiles(f).name);
        stack0=loadtiff(filename);
        ysize=size(stack0,1);
        xsize=size(stack0,2);
        nChan=size(stack0,3);
        [dummy,filenamehead1,ext] = fileparts(filename);
        %FileNameCell{f,cnt_subfoler}=matfiles(f).name;
        if fluorChan
            img = stack0(:,:,fluorChan);
            
            if fReadBleachingStep %read single probe intensity from the folder name
                Str = thisFolder;
                Key = 'bs1s';
                Index = strfind(Str, Key);
                Value = sscanf(Str(Index(1) + length(Key):end), '%f', 1);
                singleDyeInt_1s = Value
                smscale = singleDyeInt_1s*dataExposureTime;
            end
            
            %Background correction       
%             bg_bfsize=max(xsize,ysize);
%             edge = nan(4,bg_bfsize);
%             edge(1,1:xsize) = img(1,:);    edge(2,1:xsize) = img(end,:);
%             edge(3,1:ysize) = img(:,1);    edge(4,1:ysize) = img(:,end);
%             medians = nan(4,1);
%             for edgeIdx=1:4
%                 medians(edgeIdx)= median(edge(edgeIdx), 'all', 'omitnan');
%             end
%             bg = max(medians);
%             img1 = img - bg;
     
            %bgParam = 1.5;
            edgepx = [img(1,:) img(2:end,end)' img(end,1:end-1) img(2:end-1,1)'];
            bg = mean(edgepx) + bgParam*std(double(edgepx));
            img1 = uint16(img - bg);                       
            
            if fSaveBGsub
                imwrite(img1, [thisPath filesep filenamehead1 '_bgSub_' num2str(fluorChan) '.tif']);
            end

            %Get Total intensity
            totalintensity = sum(img1, 'all');
            totalProbeCount=totalintensity/smscale;
            totalProbeCountTable = table(totalProbeCount);
            %data(f,1) = totalintensity;
        else
            %totalintensity = NaN;
            totalProbeCount = NaN;
            totalProbeCountTable = table(totalProbeCount);
        end
        
        %% Cell Area analysis 
        %Find the corresponding mask file. 
        maskfilename = [];
        thisfilename = [];
        [dummy,filenamehead,ext] = fileparts(filename);
        for j=1:nfiles
            thisfilename = matfiles(j).name;
            if contains(thisfilename, filenamehead)
                if contains(thisfilename, flag4mask)
                    maskfilename=thisfilename;
                end
            end
        end
        
        if maskfilename %if there is a mask file
            regions = imread(maskfilename);
            region1 = bwareafilt(regions,1); % Extract objects from binary image by size
            region2 = bwareafilt(regions,sizeoption);
            %stats = regionprops(region1,'area','Perimeter','Centroid','MajorAxisLength','MinorAxisLength');
            regionStat1 = regionprops('table', region1,'Area','Perimeter','Centroid','MajorAxisLength','MinorAxisLength');
            regionStat2 = regionprops('table', region2,'Area','Perimeter','Centroid','MajorAxisLength','MinorAxisLength');
            totalArea = sum(regionStat2.Area);
            regionNum = size(regionStat2,1);
            if regionNum > 5
                disp('WARNING: more than 5 regions in this image!');
                maskfilename
            end
            if isempty(regionStat1)
                totalArea = 0;
                regionNum = 0;
                Area=0;
                Perimeter=0;
                Centroid=[0 0];
                MajorAxisLength=0;
                MinorAxisLength=0;
                regionStat1 = table(Area,Perimeter,Centroid, MajorAxisLength, MinorAxisLength);
            end
            totalAreaTable = table(totalArea);
            regionNumTable = table(regionNum);
            
        else %if there is not a mask file
            totalArea = NaN;
            regionNum = NaN;
            Area=NaN;
            Perimeter=NaN;
            Centroid=[NaN NaN];
            MajorAxisLength=NaN;
            MinorAxisLength=NaN;
            regionStat1 = table(Area,Perimeter,Centroid, MajorAxisLength, MinorAxisLength);
            totalAreaTable = table(totalArea);
            regionNumTable = table(regionNum);
        end
        
        FileName = {filename};
        %FileName = {maskfilename};
        FileNameTable = table(FileName);
        OneStatTable = [FileNameTable totalProbeCountTable totalAreaTable regionNumTable regionStat1];
        StatTable = [StatTable; OneStatTable];
        %maxRegionOutline = bwperim(region1);
        % circularity
        % major / minor
    end
    StatTable.MaxMinRatio = StatTable.MajorAxisLength./StatTable.MinorAxisLength ;
    StatTable.Circularity = 4*pi*(StatTable.Area)./((StatTable.Perimeter).^2);
    
    %reset the units
    StatTable.totalArea = (pixelsize^2)*StatTable.totalArea;
    StatTable.Area = (pixelsize^2)*StatTable.Area;
    StatTable.Perimeter = pixelsize*StatTable.Perimeter;
    StatTable.Centroid = pixelsize*(StatTable.Centroid - StatTable.Centroid(1,:) );
    StatTable.MajorAxisLength = pixelsize*StatTable.MajorAxisLength;
    StatTable.MinorAxisLength = pixelsize*StatTable.MinorAxisLength;
    
    % save the stat
    cd(path0)
    saveTableName = [thisFolder '_stat_gt' num2str(sizeoption(1)) '_bg' num2str(bgParam) '.txt'];
    writetable(StatTable, saveTableName,'Delimiter','\t');
    %clear all
    fclose all;
    
end
% Go to parenrt folder. 
cd(path_parent);
